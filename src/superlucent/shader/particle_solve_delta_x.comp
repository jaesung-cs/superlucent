#version 450

layout (local_size_x = 256) in;

#include "particle/particle.h"
#include "particle/simulation_params.h"
#include "particle/collision_pairs.h"
#include "particle/solver.h"

void main() 
{
	const uint particle_id = gl_GlobalInvocationID.x;
	if (particle_id >= params.num_particles)
    return;

  float m_inv = 1.f / particles[particle_id].properties.y;

  for (int i = 0; i < 3; i++)
  {
    // Set to zero
    uint delta_x_index = DeltaXIndex(particle_id * 3 + i);
    solver.matrix[delta_x_index] = 0.f;
  }

  // Iterate constraints
  for (uint constraint_id = 0; constraint_id < Rows(); constraint_id++)
  {
    float delta_lambda = solver.matrix[DeltaLambdaIndex(constraint_id)];

    if (collisions[constraint_id].ids[0] == particle_id)
    {
      vec3 n = collisions[constraint_id].n.xyz;
      vec3 Jc0 = n;

      // Accumulate contribution by constraint_id
      for (int i = 0; i < 3; i++)
        solver.matrix[DeltaXIndex(particle_id * 3 + i)] += m_inv * Jc0[i] * delta_lambda;
    }

    if (collisions[constraint_id].ids[1] == particle_id)
    {
      vec3 n = collisions[constraint_id].n.xyz;
      vec3 Jc1 = -n;

      // Accumulate contribution by constraint_id
      for (int i = 0; i < 3; i++)
        solver.matrix[DeltaXIndex(particle_id * 3 + i)] += m_inv * Jc1[i] * delta_lambda;
    }
  }
}
