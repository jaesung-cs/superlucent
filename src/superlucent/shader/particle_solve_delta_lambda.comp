#version 450

layout (local_size_x = 256) in;

#include "particle/particle.glsl"
#include "particle/simulation_params.glsl"
#include "particle/collision_pairs.glsl"
#include "particle/solver.glsl"

void main() 
{
	const uint constraint_id = gl_GlobalInvocationID.x;
	if (constraint_id >= Rows())
    return;

  ivec2 is = collisions[constraint_id].ids;
  float m0_inv = 1.f / particles[is[0]].properties.x;

  vec3 x0;
  for (int i = 0; i < 3; i++)
    x0[i] = solver.matrix[XIndex(is[0] * 3 + i)];

  vec3 r0 = collisions[constraint_id].r[0].xyz;
  vec3 n = collisions[constraint_id].n.xyz;

  float c = dot(x0 + r0, n);
  vec3 Jc0 = n;
  
  vec3 x1 = vec3(0.f);
  vec3 Jc1 = vec3(0.f);
  float m1_inv = 0.f;
  if (is[1] >= 0)
  {
    m1_inv = 1.f / particles[is[1]].properties.x;

    for (int i = 0; i < 3; i++)
      x1[i] = solver.matrix[XIndex(is[1] * 3 + i)];
  }
  vec3 r1 = collisions[constraint_id].r[1].xyz;

  c -= dot(x1 + r1, n);
  Jc1 = -n;

  float alpha_tilde = params.alpha / params.dt / params.dt;

  float lambda = solver.matrix[LambdaIndex(constraint_id)];

  float numerator = -c - alpha_tilde * lambda;
  float denominator = m0_inv * dot(Jc0, Jc0) + m1_inv * dot(Jc1, Jc1) + alpha_tilde;

  if (c < 0.f)
    solver.matrix[DeltaLambdaIndex(constraint_id)] = numerator / denominator;
  else
    solver.matrix[DeltaLambdaIndex(constraint_id)] = 0.f;
}
