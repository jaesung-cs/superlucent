#version 450

layout (local_size_x = 256) in;

#include "particle.glsl"
#include "simulation_params.glsl"
#include "collision_pairs.glsl"
#include "solver.glsl"

void main() 
{
	const uint particle_id = gl_GlobalInvocationID.x;
	if (particle_id >= params.num_particles)
    return;

  float m_inv = 1.f / out_particles[particle_id].properties.x;

  for (int i = 0; i < 3; i++)
  {
    // Set to zero
    uint delta_x_index = DeltaXIndex(particle_id * 3 + i);
    solver.matrix[delta_x_index] = 0.f;
  }

  // Iterate constraints
  int pointer = collision_chain.head[particle_id].x;
  while (pointer != -1)
  {
    const int constraint_id = pointer;

    float delta_lambda = solver.matrix[DeltaLambdaIndex(constraint_id)];

    vec3 n = collisions[constraint_id].n.xyz;
    vec3 Jc0 = n;

    // Accumulate contribution by constraint_id
    for (int i = 0; i < 3; i++)
      solver.matrix[DeltaXIndex(particle_id * 3 + i)] += m_inv * Jc0[i] * delta_lambda;

    pointer = collisions[pointer].next.x;
  }
  
  pointer = collision_chain.head[particle_id].y;
  while (pointer != -1)
  {
    const int constraint_id = pointer;

    float delta_lambda = solver.matrix[DeltaLambdaIndex(constraint_id)];

    vec3 n = collisions[constraint_id].n.xyz;
    vec3 Jc1 = -n;

    // Accumulate contribution by constraint_id
    for (int i = 0; i < 3; i++)
      solver.matrix[DeltaXIndex(particle_id * 3 + i)] += m_inv * Jc1[i] * delta_lambda;

    pointer = collisions[pointer].next.y;
  }
}
