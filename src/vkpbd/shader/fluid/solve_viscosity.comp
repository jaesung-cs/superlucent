#version 450

layout (local_size_x = 256) in;

#include "particle.glsl"
#include "fluid_simulation_params.glsl"
#include "neighbors.glsl"
#include "solver.glsl"
#include "kernel.glsl"

void main() 
{
	const int particle_index = int(gl_GlobalInvocationID);
	if (particle_index >= params.num_particles)
    return;

  const vec3 xi = out_particles[particle_index].position.xyz;
  const vec3 vi = out_particles[particle_index].velocity.xyz;
  const float density_i = solver.particles[particle_index].density;

  vec3 dv = vec3(0.f);

  const int neighbor_count = NeighborCount(particle_index);
  for (int i = 0; i < neighbor_count; i++)
  {
    const int neighbor_index = NeighborIndex(particle_index, i);

    if (neighbor_index < params.num_particles)
    {
      const float mj = out_particles[neighbor_index].properties.y;
      const vec3 xj = out_particles[neighbor_index].position.xyz;
      const vec3 vj = out_particles[neighbor_index].velocity.xyz;
      const float density_j = solver.particles[neighbor_index].density;

      // Project velocity every neighbor
      dv -= params.viscosity * (mj / density_j) * (vi - vj) * KernelW(xi - xj);
    }
  }

  solver.particles[particle_index].dv = dv;
}
